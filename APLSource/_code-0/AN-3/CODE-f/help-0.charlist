APL Array Notation (APLAN)

APL Array Notation is APL code syntax including nested array (or strand) 
      notation but with a relaxation in the rules that permits unquoted 
      line-ends or diamonds within square brackets and parentheses thus:
   [
     ]
   (
     )
   [⋄]
   (⋄)

"Broken" bracket or parenthesis pairs thus formed denote and delimit arrays 
      of rank two or higher or lists wherein each separate non-null 
      expression denotes a cell or an item.

Between brackets each line-end or diamond separated expression defines a 
      major cell of at least rank one in an array of at least rank two.
      ⍴a←[0 1 2 ⋄ 3 4 5]
(2 3)
      a
[
  0 1 2
  3 4 5
]
      ⍴b←[7 ⋄ 6 ⋄ 5]
(3 1)
      b
[
  7
  6
  5
]

A cell delimited by further nested brackets defines a higher ranked cell.
      ⍴c←[[0  1  2 ⋄ 3  4  5] ⋄ [6  7  8 ⋄ 9 10 11]]
(2 2 3)
      c
[
  [
    0  1  2
    3  4  5
  ]
  [
    6  7  8
    9 10 11
  ]
]

The rank of the resultant array is one greater than that of the cell with
      the greatest rank, all cells having been augmented with leading unit 
      dimensions and overtaken to the greatest rank and shape where 
      necessary.
      ⍴d←['this string' ⋄ ['this two row' ⋄ 'matrix']]
(2 2 12)
      d
[
  [
    'this string '
    '            '
  ]
  [
    'this two row'
    'matrix      '
  ]
]

Between parentheses each line-end or diamond separated expression defines an
      item of a list.
      (≡,⍴)e←(2 1 0 ⋄ 5 4 3)
2 2
      e
(
  2 1 0
  5 4 3
)
      ]disp e
┌→────┬─────┐
│2 1 0│5 4 3│
└~───→┴~───→┘

The depth of the resultant list is one greater than that of the item with
      the greatest depth.
      (≡,⍴)f←('abc' ⋄ ('def' ⋄ 'ghi') ⋄ 'jkl')
(3 3)
      f
(
  'abc'
  (
    'def
    'ghi'
  )
  'jkl'
)

Any item of a parenthesised list can be a bracketed array.
      (≡,⍴)g←('abcd' ⋄ [0 1 2 ⋄ 3 4 5] ⋄ 'efghij')
(2 3)
      g
(
  'abcd'
  [ 
    0 1 2
    3 4 5
  ]
  'efghij'
)
      ]disp g
┌→───┬─────┬──────┐
│abcd│0 1 2│efghij│
│    │3 4 5↓      │
└───→┴~───→┴─────→┘

Any cell of a bracketed array can be a parenthesised list.
      (≡,⍴)h←['abc' ⋄ (0 1 2 ⋄ 3 4 5) ⋄ 'def']
(2 3 3)
      h
[
  'a' 'b' 'c'            
  (0 1 2) (3 4 5) (0 0 0)
  'd' 'e' 'f'            
]
      ]disp h
┌→────┬─────┬─────┐
↓a    │b    │c    │
├─────┼─────┼─────┤
│0 1 2│3 4 5│0 0 0│
├~───→┼~───→┼~───→┤
│d    │e    │f    │
└─────┴─────┴─────┘

--------------------------------------------

A bracket pair that contains assignments defines a space.
      ≢e←[a←0 ⋄ b←1 ⋄ c←2]
1
      e
[
    a←0
    b←1
    c←2
]

In a space definition each expression defines a member that may be an array
      or a space.
      ⊢f←[scalar←'A' ⋄ array←⍳2 3 ⋄ ns←[zero←0 ⋄ one←'One']
[
    array←([
        (0 0) (0 1) (0 2)
        (1 0) (1 1) (1 2)
    ])
    ns←[
        one←'One'
        zero←0
    ]
    scalar←'A'
]

In the present implementation:
Assignments are not permitted in an array definition except inside further
      brackets defining an item as a space.
      ⍴g←['zero' 'one' 'two' ⋄ [a←3 ⋄ b←4 ⋄ c←5] 6 7]
(2 3) 
      g
([
    'zero' 'one' 'two'
    [
        a←3
        b←4
        c←5
    ]6 7
])

Unassigned expressions and function or operator definitions are not 
      permitted in a space definition.

Almost all arrays and spaces can be formatted as APLAN reversibly in that
      decoding the result produces an identical clone of the original,
      exceptions being results of ⎕OR; scripted spaces and classes; 
      cross-referenced spaces; and spaces that contain defined or derived 
      operations.

⍝ Phil Last 2018-03-22 11.36

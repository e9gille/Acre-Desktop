 getSource←{dat←⍺ ⋄ ref←⍵≡MS.BG ⋄ prev←dat getTime''
     src tgt←dat.(source nspath),¨'' '.'           ⍝ ../APLSource/
     read←{⊃MS.HI ⎕NGET ⍵ 1}
     (path date)←{⍵.(Path Date)}fileTree⊢src       ⍝ all files
     path date/⍨←⊂~∨/'/.'⍷(≢src)↓⍤1↑path           ⍝ ignore all /.*/
     file type←↓⍉↑(UT.px(≢src)↓⊢)¨path             ⍝ 'ns/path/file' '.type'
     path date file type/⍨←∊/Cc type(MS.AZ,MS.AY)  ⍝ only valid types
     name←'/.'decodeCaps file
     path date file name type/⍨←⊂ref≤new←date>prev ⍝ new or not refresh
     dup←(⊢∊⊢(/⍨)~∘nub)name
     z←showMsg MS.DD showList,/(tgt∘,¨dup/name),'=',⍪dup/type
     z←showMsg MS.BC,MS.EO,((≢path)UT.pl MS.FL),MS.EY,¯4 tPath src
     val←3 read ticks path ⋄ fqn←tgt∘,¨name
     fqn type val msk←1 fixValue fqn type val      ⍝ name/type-change?
     z←showMsg MS.FW∘,¨(¯4 tPath¨path/⍨~msk),¨⊂MS.BP ⍝ file needs att'n
     fqn type val path date/⍨←⊂msk                 ⍝ remove unfixed
     z←dat renameSource path fqn                   ⍝ if different
     z←dat putTime''
     ~dat.hist:fqn if ref⊢⍵
     chgs←⊃(⊣(/⍨)prev<⊢)/dat changes''             ⍝ new in acre
     diff←(fqn∊chgs)<prev<date                     ⍝ new in OS
     msg←MS.EN,((+/diff)UT.pl MS.FN),MS.EZ,¯4 tPath dat.changes
     z←showMsg msg showList diff/fqn
     fqn←dat putChange diff∘/¨fqn val type
     fqn if ref⊢⍵
⍝ ⍺ dat
⍝ ⍵ ? or MS.BG ('Refresh')
⍝ ← ⍵ or fqns of refreshed items
⍝ get source and fix; if refresh fetch only changes
⍝ Phil 2018-07-18 19.47
 }

 getSource←{dat←⍺
     src←dat.source                                   ⍝ ../APLSource/
     tgt←dat.nspath,'.'
     read←{⊃MS.HI ⎕NGET ⍵ 1}
     (path date)←{⍵.(Path Date)}fileTree⊢src     ⍝ all files
     file type←↓⍉↑(UT.px(≢src)↓⊢)¨path           ⍝ 'ns/path/file' '.type'
     path date file type/⍨←∊/CC type MS.AZ       ⍝ only valid types
     name←'/.'decodeCaps file
     dup←(⊢∊⊢(/⍨)⍳⍨≠⍳∘≢)name
     z←showMsg MS.DD showList,/(tgt∘,¨dup/name),'=',⍪dup/type
⍝     was←dat sourceReg''
     was←{⎕NS ⍵.(⎕NL-2.1)}if{null ⍵.name}dat sourceReg''
⍝     was.(name file date),←(null was.name)/¨name file date
     del←tgt∘,¨was.name~name                    ⍝ file missing
     z←showMsg(×z)/((z←≢del)UT.pl MS.FL),MS.EV,MS.EY,src
     fnm←~∘∊⍨(⊃∘⊃0 ⎕NINFO⍠1⊢)¨dat getChangeFilenames del  ⍝ ".*"
     ⍝ rename existing .change to ↓ .delete ELSE FORGET!!
     z←showMsg(×z)/MS.EP,((z←≢fnm)UT.pl MS.EG),MS.EZ,MS.EX
     z←{⎕NUNTIE ⍵ ⎕NRENAME ⍺ ⎕NTIE 0}/fnm,⍪,∘MS.EX¨(-≢MS.HN)↓¨fnm
     diff←date≠was.(date name)UT.co name   ⍝ diff date - maybe new
     z←showMsg MS.EO,((≢path)UT.pl MS.FK),MS.EY,src
     val←read/0,⍪path
     fqn type val←fixValue(tgt∘,¨name)type val ⍝ type could change
     z←showMsg(×z)/MS.EN,((z←+/diff)UT.pl MS.FN),MS.EZ,dat.changes
     fqn←dat putChange diff∘/¨fqn val type
     (reg←⎕NS'').(name file date)←name file date
     reg UT.aw dat.sourcereg
⍝ ⍺ dat
⍝ ⍵ ?
⍝ ← fqn type value
⍝   get source tree
⍝   read source reg
⍝   compare
⍝   create deletefiles
⍝   read source files
⍝   fix values
⍝   create changefiles
⍝   write new source reg
⍝ Phil 2018-02-16 23.10
 }

 getSource←{dat←⍺
     src tgt←dat.(source nspath),¨'' '.'          ⍝ ../APLSource/
     ref←⍵≡MS.BG ⋄ last←⌈/dat.loadtime            ⍝ refresh
     read←{⊃MS.HI ⎕NGET ⍵ 1}
     (path date)←{⍵.(Path Date)}fileTree⊢src      ⍝ all files
     path date/⍨←⊂~∨/'/.'⍷(≢src)↓⍤1↑path          ⍝ ignore all /.*/
     file type←↓⍉↑(UT.px(≢src)↓⊢)¨path            ⍝ 'ns/path/file' '.type'
     path date file type/⍨←∊/Cc type(MS.AZ,MS.AY) ⍝ only valid types
     name←'/.'decodeCaps file
     now←⎕NS(sourceFields'').⎕NL-2.1              ⍝ name file date
     path date file name type/⍨←⊂ref≤new←date>last⍝ new or not refresh
     dup←(⊢∊⊢(/⍨)⍳⍨≠⍳∘≢)name
     z←showMsg MS.DD showList,/(tgt∘,¨dup/name),'=',⍪dup/type
     z←showMsg MS.BC,MS.EO,((≢path)UT.pl MS.FL),MS.EY,src
     val←read/0,⍪path ⋄ tnam←tgt∘,¨name
     fqn type val ren←1 fixValue tnam type val    ⍝ name/type-change
     z←{on nn←⍵ ⋄ of←(tnam⍳⊂on)⊃path ⋄ nf←⊃dat getSourceFilenames nn
         t←of ⎕NTIE 0 ⋄ 0::⎕NUNTIE t ⋄ ⊢⎕NUNTIE nf ⎕NRENAME t}/0,⍪ren
     dat.loadtime,←ref/DT.ts2dt ⎕TS
     ~dat.hist:fqn if ref⊢⍵

     was←now if{null ⍵.name}dat sourceReg''       ⍝ what was last time
     del←⎕EX dat erase tgt∘,¨was.name~now.name    ⍝ file missing
     name date←↓⍉↑(↓⍉↑name date)tnam UT.co fqn
     diff←⍬ if(0∊⍴)date≠was.(date name)UT.co name ⍝ diff date - maybe new
     msg←MS.EN,((+/diff)UT.pl MS.FN),MS.EZ,¯30 UT.tm dat.changes
     z←showMsg msg showList diff/fqn
     fqn←dat putChange diff∘/¨fqn val type
     fqn if ref⊢⍵⊣now UT.aw dat.sourcereg
⍝ ⍺ dat
⍝ ⍵ ? or MS.BG ('Refresh')
⍝ ← ⍵ or fqns of refreshed items
⍝ get source and fix; if refresh fetch only changes
⍝ Phil 2018-07-18 19.47
 }
